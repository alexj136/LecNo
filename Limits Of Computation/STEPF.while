read CdStVlB
	// Break the list up into separate parts - the command stack & computation stack in one list for
	// pattern matching, and Vl as a variable on its own
	CdSt := (list hd CdStVlB hd tl CdStVlB);
	Vl := hd tl tl CdStVlB;
	B := hd tl tl tl CdStVlB;
	
	// Some auxilliary constants for readability
	do_hd := "11";
	do_tl := "12";
	do_cons := "13";
	do_if := "14";
	// appf := semicolon
	do_appf := "15";
	return := "16";
	
	case CdSt of
		(((quote D).Cr) St) => new_CdSt := (list Cr cons D St);
		(((var).Cr) St) => new_CdSt := (list Cr cons Vl St);

		// hd and do_hd (11 = do_hd)
		(((hd E).Cr) St) => new_CdSt := (list cons E cons do_hd Cr St);
		((11.Cr) (T.Sr)) => new_CdSt := (list Cr cons hd T Sr);

		// tl and do_tl (12 = do_tl)
		(((tl E).Cr) St) => new_CdSt := (list cons E cons do_tl Cr St);
		((12.Cr) (T.Sr)) => new_CdSt := (list Cr cons tl T Sr);

		// cons and do_cons (13 = do_cons)
		(((cons E1 E2).Cr) St) => new_CdSt := (list cons E1 cons E2 cons do_cons Cr St);
		((13.Cr) (U.(T.Sr))) => new_CdSt := (list Cr cons cons T U Sr);

		// appf = semicolon, do_appf = 15
		(((; E).Cr) St) => new_CdSt := (list cons E cons do_appf Cr St);
		((15.Cr) (W.Sr)) => Cd := cons B cons return Cr;
							St := cons Vl Sr;
							Vl := W;
							new_CdSt := (list Cd St);

		// return = 16
		((16.Cr) (U.(V.Sr))) => Cd := Cr;
								St := cons U Sr;
								Vl := V;
								new_CdSt := (list Cd St);

		// do_if = 14
		(((if E F G).Cr) St) => new_CdSt := (list cons E cons do_if cons F cons G Cr St);
		((14.(F.(G.Cr))) (nil.Sr)) => new_CdSt := (list cons G Cr Sr);
		((14.(F.(G.Cr))) (D.Sr)) => new_CdSt := (list cons F Cr Sr);

	// Build up a list of the same form as the argument
	new_CdStVl := (list hd new_CdSt hd tl new_CdSt Vl)
write new_CdStVl
