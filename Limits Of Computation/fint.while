read X // X is ((E.B).D) where D is the program argument, E is the expression before the whererec, and B is the body of the function after whererec
	Cd := cons hd hd X nil; // Stack of code to evaluate (one per function call). Initially contains only the expression before the whererec
	B := tl hd X; // Body of  function definition - carried through all the semantic definitions
	Vl := tl X; // The program's argument
	St := nil; // Computation stack
	while Cd do
		new_CdStVl := <STEPF.wcl> (list Cd St Vl B); // Call STEPF to get the new values for Cd, St & Vl
		Cd := hd new_CdStVl;
		St := hd tl new_CdStVl;
		Vl := hd tl tl new_CdStVl;
	X := hd St // Once the loop has ended, the result will be on the top of the stack, so return it
write X
